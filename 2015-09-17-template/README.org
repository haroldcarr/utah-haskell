Utah Haskell : September 17, 2015 (Thursday)

* themes

- client-side REST using [[http://www.serpentine.com/wreq][Wreq]]
- folds instead of explicit recursion
  - http://learnyouahaskell.com/higher-order-functions
    - scroll down/ search for 'Only folds and horses' (about 3/4 down)
  - https://www.cs.nott.ac.uk/~gmh/fold.pdf
    - sections 1 and 2
- CIS 194 homework 1 exercises 1 and 4
  - http://www.seas.upenn.edu/~cis194/hw/01-intro.pdf
  - use solutions to exercise 1 and a fold to implement exercise 4

* interaction

Participants use [[http://www.serpentine.com/wreq][Wreq]] to send messages to a web service we will have running.

The service will be running on a laptop plugged into a projector. It
will display what participants send.

The service responds to participant's messages by posing challenges.
The challenges are based on
- getting info from Wreq responses
- folds (from the material above)
- CIS 194 exercises (above)

Participants send (text-representations of) solutions to the challenges.

Participants can also send questions.  Everything sent is displayed.

'wreq' requests should be sent to
- [[http://127.0.0.1:3000]]
- note: the =127.0.0.1= address will be replaced in the meeting

Example:

#+begin_example
curl -i 127.0.0.1:3000     -X POST -d '{ "name": "H", "msgId": 0, "txt": "greetings!" }'
#+end_example

* instructions

** clone repo

#+BEGIN_EXAMPLE
git clone git@github.com:haroldcarr/utah-haskell.git
#+END_EXAMPLE

Suggest: *only* look at =2015-09-17-template= (the other directories contain answers).

** download dependencies

This assumes you have [[https://github.com/commercialhaskell/stack][stack]] installed (as shown in our first meeting: [[http://seanhess.github.io/2015/08/04/practical-haskell-getting-started.html][getting started with stack]])

#+BEGIN_EXAMPLE
# go to directory that was cloned
cd utah-haskell

# go to this meeting's project
cd 2015-09-17-template

# build the template (this causes dependencies to be downloaded)
stack setup
stack build
#+END_EXAMPLE

** OPTIONAL : build/run the service

Do this if you want to experiment in advance of the meeting.
For the meeting we will have this service running.

#+BEGIN_EXAMPLE
# go to directory that was cloned
cd utah-haskell

# service location
cd infrastructure

# build the service (and download dependencies)
stack setup
stack build

# run the service
stack exec utah-haskell-exe &
#+END_EXAMPLE

The service receives requests at [[http://127.0.0.1:3000]]

The service displays (i.e., point your browser to) request/responses at [[http://127.0.0.1:8023]]

** communicate with the service

*** via curl

#+begin_example
curl -i 127.0.0.1:3000     -X POST -d '{ "name": "H", "msgId": 0, "txt": "greetings!" }'
#+end_example

Note: the response =txt= field contains Haskell code.  See the "challenges" section below for more info.

*** via ghci

*This is where the exercise /really/ begins.*

Start ghci:

#+BEGIN_EXAMPLE
cd utah-haskell
cd 2015-09-17-template
stack ghci
#+END_EXAMPLE

Enter the following into ghci:

#+BEGIN_EXAMPLE
:set -XOverloadedStrings
#+END_EXAMPLE

Now you can send messages to the services.

In ghci, instances of =Msg= are created via:

#+BEGIN_EXAMPLE
let outMsg = Msg "Your Name" 0 "some message text"
#+END_EXAMPLE

In ghci, a haskell representation of JSON is created via:

#+BEGIN_EXAMPLE
let jsn = toJSON outMsg
#+END_EXAMPLE

Messages to the service can be sent (and responses captured in =r=) via:

#+BEGIN_EXAMPLE
r <- post "http://127.0.0.1:3000" jsn
#+END_EXAMPLE

The response can be examined using techniques shown in the Wreq tutorial:

#+BEGIN_EXAMPLE
r ^? responseBody
r ^? responseBody . key "txt"

let (Just m)   = r ^? responseBody
let (Just inMsg) = (decode m) :: (Maybe Msg)
#+END_EXAMPLE

** challenges

You first message should contain:
- a =name= field that contains your unique name (perhaps your email address)
- a =msgId= field that can contain any integer (it is ignored on the first message)
- a =txt= field that can contain any string (it is ignored on the first message)

The service will respond with a message that contains:
- a =name= field that echos what your sent
- a =msgId= field that you should use on your next message
- a =txt= field that contains code you should run in ghci

The service response =txt= field is a "challenge"
- enter that challenge into ghci
- grab ghci's response
- create a =Msg=
  - with your same =name= field
  - with the same =msgId= as the challenge =msgId=
  - with ghci's response as the =txt= field
- send that =Msg= to the service
  - if your answer is correct the service will issue a new challenge
  - else it will issue the same challenge again

Note: remember to (un)escape string quotes where appropriate.

* folds

Note the pattern in:

#+BEGIN_SRC haskell
sumR []     = 0
sumR (x:xs) = x +  sumR xs

andR []     = True
andR (x:xs) = x && andR xs
#+END_SRC

Same recursive structure, except
- =0= or =True= for the empty list
- =+= or =&&= for the operator

Folds "factor out" recursion:

#+BEGIN_SRC haskell
sumF :: (Foldable t, Num b) => t b    -> b
sumF  = foldr (+)  0

andF :: Foldable t          => t Bool -> Bool
andF  = foldr (&&) True
#+END_SRC

This can be visualized as:

#+BEGIN_EXAMPLE
     sumF                  andF
      +                     &&
     / \                   /  \
    1   +               True   &&
       / \                    /  \
      2   +               False   &&
         / \                     /  \
        3   0                 True  True
#+END_EXAMPLE

The definition of =length= follows a similar pattern, except it
ignores the value of the list elements and keeps a counter:

#+BEGIN_SRC haskell
lengthR []     = 0
lengthR (_:xs) = 1 + (lengthR xs)
#+END_SRC

This can also be expressed as a fold:

#+BEGIN_SRC haskell
lengthF :: (Foldable t, Num b) => t a -> b
lengthF        = foldr (\_ n -> 1 + n) 0
#+END_SRC

A good way to understand how this works is to look at the definition of =foldr= :

#+BEGIN_EXAMPLE
fold :: (a -> b -> b) -> b -> [a] -> b
fold f v []     = v
fold f v (x:xs) = f x (fold f v xs)
#+END_EXAMPLE

Which is visualized (along with the previous examples) as =1+= :

#+BEGIN_EXAMPLE
     sumF                  andF                  lengthF
      +                     &&                      1+
     / \                   /  \                    /  \
    1   +               True   &&                 _    1+
       / \                    /  \                    /  \
      2   +               False   &&                 _    1+
         / \                     /  \                    /  \
        3   0                 True  True                _    0
#+END_EXAMPLE

